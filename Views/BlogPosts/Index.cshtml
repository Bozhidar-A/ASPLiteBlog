@using X.PagedList.Mvc.Core;
@using X.PagedList;
@*@model IEnumerable<ASPLiteBlog.Models.BlogPost>*@
@model IPagedList<ASPLiteBlog.Models.BlogPost>


@using Microsoft.AspNetCore.Identity
@using ASPLiteBlog.Data
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "Index";
}
@functions{
    public string GetProperAuthorName(string userID)
    {
        var appUser = UserManager.FindByIdAsync(userID).GetAwaiter().GetResult();
        //this is very bad and very scuffed, but it works

        if (appUser.displayUsername)
        {
            return appUser.UserName;
        }

        return $"{appUser.firstName} {appUser.lastName}";
    }
}

<link href="~/css/PagedList.css" rel="stylesheet" type="text/css" />

<head>
  <link rel="stylesheet" href="~/css/site.css">
</head>

<h1>Index</h1>

@if (User.IsInRole("admin") || User.IsInRole("writer"))
{
     <p>
        <a asp-action="Create">Create New</a>
    </p>
}

<form asp-controller="BlogPosts" asp-action="Index">
    <label for="nameSearch">Post name:</label><br>
    <input id="nameSearch" name="nameSearch" value="@ViewData["CurrentFilter"]" /><br>
    <input name="prevNameSearch" value="@ViewData["CurrentFilter"]" hidden />
    <button type="submit">Search</button>
</form>

<br />
<br />
@*this is VERY BAD*@

<table>
    <tbody>
@foreach (var item in Model) {
                <tr onclick="location.href = '@Url.Action("Details", "BlogPosts", new {ID = item.ID})'" class="MouseClickIcon">
                    <td>
                        <img class="IMG300X300" src="~/@item.previewPicLocation" />
                    </td>
                    <td class="">
                        <div class="FLEXCOLUM">
                            <b>@Html.DisplayFor(modelItem => item.title)</b>
                            @GetProperAuthorName(item.userID)
                        </div>
                    </td>
                </tr>
            @if(User.IsInRole("admin") || User.IsInRole("writer"))
            {
                <td style="vertical-align: middle;">
                    <a asp-action="Edit" asp-route-id="@item.ID">Edit</a> |
                    <a asp-action="Delete" asp-route-id="@item.ID">Delete</a>
                </td>
            }
}
    </tbody>
</table>

<br />
@Html.PagedListPager(Model, page => Url.Action("Index", new { page = page, nameSearch = ViewData["CurrentFilter"], prevNameSearch = ViewData["CurrentFilter"]}) )
